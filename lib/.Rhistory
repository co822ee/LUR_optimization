input_folder <- "../data/predictor_withoutMV/"
output_folder <- "../data/predictor_withouMV/road_merge_laea/"
if(dir.exists(input_folder)){
dir.create(input_folder)
}
input_folder
getwd
getwd()
if(!dir.exists(input_folder)){
dir.create(input_folder)
}
if(!dir.exists(output_folder)){
dir.create(output_folder)
}
dir.exists(output_folder)
dir.exists(input_folder)
dir.create(output_folder)
input_folder
output_folder
output_folder
if(!dir.exists(output_folder)){
dir.create(output_folder)
}
dir.create(output_folder)
if(!dir.exists(output_folder)){
dir.create(output_folder)
}
input_folder <- "../data/predictor_withoutMV/"
output_folder <- "../data/predictor_withoutMV/road_merge_laea/"
if(!dir.exists(input_folder)){
dir.create(input_folder)
}
if(!dir.exists(output_folder)){
dir.create(output_folder)
}
input_folder <- "../data/predictor_withoutMV/"
input_merge_folder <- "../data/predictor_withouMV/road_merge_laea/"
output_folder <- "../data/predictor_normalize_area/"
if(!dir.exists(output_folder)){
dir.create(output_folder)
}
library(raster)
# Raw data
predictor_map <- raster("../data/raw_data/predictor_map/road_class_5_800.map")
# Intermediate data for processing
tropomiRaster_filepath <- '../data/TROPOMI_temis_laea/raster'
# Final data for the later modeling in PCRaster
tropomiFinal_filepath <- '../data/TROPOMI_temis_laea'
if(!dir.exists(tropomiRaster_filepath)){
dir.create(tropomiRaster_filepath)
}
# Setting:
# original projection: laea
lon=5.616667
lat=52.083333
localProj <- crs(paste0(' +proj=laea +lon_0=', lon, ' +lat_0=', lat,
' +x_0=0 +y_0=0 +ellps=WGS84 +units=m +no_defs'))
library(dplyr)
library(pbapply)
library(gtools)
inputFilePath <- "../data/GLUE/"
target_b <- 8          #5
target_p <- 8          #10
nrOfTargetConvPoints <- 500   #1% of the sample points
#----------1. Combine all the simulation results----------
readFile <- function(runtime){
filePath <- paste0(inputFilePath,"stochastic_0", runtime)
txtFileName <- list.files(path=filePath,
pattern=".txt")
txtFileName <- txtFileName[grepl("^(?=.*stochastic_)", txtFileName, perl=TRUE)]
txtFileName <- mixedsort(sort(txtFileName))   #mixedsort in gtools package
txt <- pblapply(paste0(filePath, '/', txtFileName), read.table, header=TRUE)
rmse <-  do.call("rbind", txt)
rmse_b <- rmse %>% rename(rmse_b=rmse)
rmse_b
}
rmse_b1 <- readFile(1)
rmse_b2 <- readFile(2)
rmse_b <- rbind(rmse_b1,rmse_b2)
#-------2. Calculate the RMSE of the sensor data ------------
data_all <- read.csv("../data/sensorTrainData_all.csv")
lur  <- read.csv("../data/lur_lasso_norm_newData_1.csv", header = T)
y_est <- "AQValue"
lur_p <- rmse_b %>% select(-h, -rmse_b)
x <- data_all %>% select(lur$predName %>% as.character())
library(dplyr)
library(pbapply)
library(gtools)
inputFilePath <- "../data/GLUE/"
target_b <- 8          #5
target_p <- 8          #10
inputFilePath <- "../data/GLUE/"
target_b <- 8          #5
target_p <- 8          #10
nrOfTargetConvPoints <- 500   #1% of the sample points
#----------1. Combine all the simulation results----------
readFile <- function(runtime){
filePath <- paste0(inputFilePath,"stochastic_0", runtime)
txtFileName <- list.files(path=filePath,
pattern=".txt")
txtFileName <- txtFileName[grepl("^(?=.*stochastic_)", txtFileName, perl=TRUE)]
txtFileName <- mixedsort(sort(txtFileName))   #mixedsort in gtools package
txt <- pblapply(paste0(filePath, '/', txtFileName), read.table, header=TRUE)
rmse <-  do.call("rbind", txt)
rmse_b <- rmse %>% rename(rmse_b=rmse)
rmse_b
}
rmse_b1 <- readFile(1)
rmse_b2 <- readFile(2)
rmse_b <- rbind(rmse_b1,rmse_b2)
#-------2. Calculate the RMSE of the sensor data ------------
data_all <- read.csv("../data/sensorTrainData_all.csv")
getwd()
